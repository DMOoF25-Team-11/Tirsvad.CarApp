---
UML class diagram for the CarApp project
---

classDiagram
    
class Program {
        -int _paganize
        -Car? _selectedCar
        -Authentication _auth
        -FuelPriceList _fuelPricelist
        -CarList _carList
        -int FirstAutomobileYear
        -string? CurrentUser
        +void Login()
        +bool IsPalindrome(Car car)
        +bool DoFuelTypeIdExists(int fuelTypeId)
        +Car? SelectCar()
        +Car InputAddCar()
        +void RemoveCar(Car selectedCar)
        +void PalinDrome(Car selectedCar)
        +double CalculateFuelNeeded(Car selectedCar, double distance)
        +void CalculateTripCost(Car selectedCar)
        +void Drive(Car selectedCar)
        +void CreateTableFrameH(List~int~ columns)
        +void Header(string subTitle, string title)
        +string CenterString(string text, int width)
        +void PrintError(string message)
        +string HidePasswordInput()
        +void ShowCarDetail(Car car)
        +void ShowCarList()
        +void ShowCarListByOwners()
        +void Menu()
        +void RapportMenu()
        +int PaganizesMenu(List~MenuItem~ menuItems, int pageSize, bool sorting)
        +void Main(string[] args)
}

namespace CarApp.Model {

    class Car {
        int Id
        string Brand
        string Model
        int Year
        char GearType
        double FuelEfficiency
        int Mileage
        Engine? Engine
        Wheel[] Wheels
        string Description
        Owner? Owner
        List~Trip~? Trips
        bool IsEngineRunning
        Car(int id, string brand, string model, int year, char gearType, double fuelEfficiency, int mileage, Engine engine, Wheel[] wheels, string description, Owner? owner)
        void ToggleEngine()
        void StartEngine()
        void StopEngine()
        void Drive(Trip trip)
        void UpdateMileAge(int addDistanceInKm)
        static double CalculateFuelNeeded(Car car, int distance)
        static double CalculateTripCost(Car car, double fuelNeeded, double fuelPrice)
        double RemoveTrip(Trip trip)
        string ToStringAllTrip(Car car)
        int getId()
        string getBrand()
        string getModel()
        int getYear()
        char getGearType()
        double getFuelEfficiency()
        int getMileage()
        Engine? getEngine()
        Wheel[] getWheels()
        string getDescription()
        Owner? getOwner()
        List~Trip~? getTrips()
        bool getIsEngineRunning()
        void setIsEngineRunning(bool value)
    }

    class Engine {
        <<enumeration>> FuelType
        string Name
        double? Ccm
        int HorsePower
        int Torque
        FuelType Fuel
        int Mileage
        DateTime LastService
        int ServiceIntervalMileage
        int ServiceIntervalMonths
        Engine(string name, double ccm, int horsePower, int torque, FuelType fuel, int mileage, DateTime lastService, int serviceIntervalMileage, int serviceIntervalMonths)
        Engine(string name, int horsePower, int torque, FuelType fuel, int mileage, DateTime lastService, int serviceIntervalMileage, int serviceIntervalMonths)
        void AddMileage(int mileage)
        bool IsServiceTime()
        static bool TryParseHorsePower(string input, out int horsePower)
        static bool TryParseTorque(string input, out int torque)
        static bool TryParseCcm(string input, out double ccm)
        static bool TryParseServiceIntervalMileage(string input, out int serviceIntervalMileage)
        static bool TryParseServiceIntervalMonths(string input, out int serviceIntervalMonths)
        string ToString()
        string getName()
        double? getCcm()
        int getHorsePower()
        int getTorque()
        FuelType getFuel()
        int getMileage()
        void setMileage(int value)
        DateTime getLastService()
        void setLastService(DateTime value)
        int getServiceIntervalMileage()
        int getServiceIntervalMonths()
    }

    class Wheel {
        Tire Tire
        Wheel(Tire tire)
        static Wheel[] GetSetOf4Wheels(Tire tire)
        Tire getTire()
        void setTire(Tire value)
    }


    class Owner {
        int Id
        string Name
        Owner(int id, string name)
        void UpdateName(string name)
        int getId()
        string getName()
        void setName(string value)
    }

    class Trip {
        double Distance
        DateTime TripDate
        DateTime StartTime
        DateTime EndTime
        Car Car
        double FuelPrice
        Trip(double distance, DateTime tripDate, DateTime startTime, DateTime endTime, double fuelPrice)
        TimeSpan CalculateDuration()
        double CalculateFuelConsumption(Car car)
        double CalculateTripPrice(double fuelNeeded)
        string GetTripInfo(Car car)
    }

    class Tire {
        <<enumeration>> SeasonType
        <<enumeration>> ConstructionType
        string Brand
        string Model
        int Width
        int Height
        int Inch
        ConstructionType Construction
        SeasonType Season
        Tire(string brand, string model, int width, int height, int inch, ConstructionType construction, SeasonType season)
        string getBrand()
        string getModel()
        int getWidth()
        int getHeight()
        int getInch()
        ConstructionType getConstruction()
        SeasonType getSeason()
    }

    class CarList {
        static CarList? _instance
        static readonly object _lock
        static CarList Instance
        List~Car~ Cars
        OwnerList OwnerList
        CarList()
        void Add(Car car)
        void Remove(Car car)
        List~Car~ GetCars()
        string ToString()
        void Seed()
        int GenerateId()
        static CarList getInstance()
    }

    class FuelPriceList {
        +List~FuelPrice~ FuelPrices
        +double? GetPrice(FuelType fuelType)
    }

    class FuelPrice {
        +FuelType FuelType
        +double Price
        +string Measurement
    }

    class Authentication {
        +string? User
        +bool Login(string username, string password)
        +void Logout()
        +Role GetRole(string? user)
    }

    class MenuItem {
        +string Name
        +int Index
    }

    class UserList {
        +List~User~ Users
        +void Seed()
    }

    class OwnerList {
        List~Owner~ _owners
        static OwnerList Instance
        OwnerList()
        void Seed()
        void AddOwner(Owner owner)
        void RemoveOwner(Owner owner)
        List~Owner~ GetOwner(string name)
        Owner? GetOwnerById(int id)
        List~Owner~ getOwners()
    }
}

Program --> Car
Program --> Authentication
Program --> FuelPriceList
Program --> CarList
Program --> TripList
Program --> MenuItem
Car --> Engine
Car --> Wheel
Car --> Owner
Car --> TripList
Wheel --> Tire
TripList --> Trip
CarList --> Car
FuelPriceList --> FuelPrice
Authentication --> UserList
OwnerList --> Owner
